import React from "react";import { Input } from "../Input/Input";import { Button } from "../Button/Button";import { useEmailValidator } from "../InputValidators/EmailValidator";import computerImage from "../../assets/computer.svg";import "./styles/style.scss";import { TrackingNumber } from "../Input/TrackingNumber";import { Captcha } from "../Captcha/Captcha";import { Overlay } from "../Overlay/Overlay";import messageSentImage from "../../assets/messageSent.svg";import axios from "axios";import { ValidIndicator } from "../Button/ValidIndicator";import {useTrackingValidator} from "../InputValidators/TrackingValidator";interface BoxProps {  sharedObject: {};}export interface TrackingNumberProps {  buildTrackingNum: {    boxOne: string;    boxTwo: string;    boxThree: string;  };  trackingNumber: string;}interface UserInputProps {  email: string;  trackingNumber: string;}export const Box: React.FC<BoxProps> = ({ sharedObject }) => {  document.title = "ראשי";  // initiating email state as empty string.  const [emailState, setEmailState] = React.useState("");  // handling modal appearance.  const [showMessageSent, setShowMessageSent] = React.useState(false);  // initiating tracking number state  const [trackingNumberState, setTrackingNumber] = React.useState<    TrackingNumberProps  >({    buildTrackingNum: {      boxOne: "",      boxTwo: "",      boxThree: "",    },    trackingNumber: "",  });  // initiating object that later will be sent to the data base.  const [userInput, setUserInput] = React.useState<UserInputProps>({    email: "",    trackingNumber: "",  });  // The state of the Validation Indicator.  const [colorState, setColorState] = React.useState("text-danger");  // current captcha state  const [CaptchaState, setCaptchaState] = React.useState('');  // returning errors object and isValid boolean, to handle UI errors. - Email  const validatedEmail = useEmailValidator(emailState);  // returning errors object and isValid boolean, to handle UI errors. - Tracking Number  const validatedTrackingNumber = useTrackingValidator(trackingNumberState);  const captchaRef = React.createRef<any>();  // function that gets an object from the validation, hook and decides the state of the indicator.  const buildColors = (validatedObject: {    errors: {      emailError?: string      trackingError?: string    }    isValid?: boolean  }) => {    if (validatedObject.isValid === false) {      setColorState("text-danger");    }    if (validatedObject.isValid === true) {      setColorState("text-success");    }    console.log(validatedEmail.isValid);  };  const updateDB = async () => {    console.log(validatedTrackingNumber, validatedEmail)  };  return (    <div className="p-2 mainBox w-100">      <div className="d-flex flex-column align-items-center">        <div className="p2 m-2 d-flex justify-content-center w-100">          <ValidIndicator            colorState={colorState}            isValid={validatedEmail?.isValid}            handleSubmit={undefined}          />          <Input            currentState={emailState}            setState={setEmailState}            length={99}            label={"הכנס כתובת דוא״ל"}            name={"email"}            inputType={"email"}            buildColors={buildColors}            validatedObject={validatedEmail}            errors={validatedEmail?.errors || undefined}          />        </div>        <div className="d-flex justify-content-end w-100">        <img className="background" src={computerImage} />      </div>        <div className="p2 m-2 d-flex justify-content-center w-100">          <div className="" style={{transform: 'translateX(-7rem)'}}>            <ValidIndicator                colorState={colorState}                isValid={validatedEmail?.isValid}                handleSubmit={undefined}            />          </div>            <TrackingNumber              buildColors={buildColors}              handleSubmit={null}              validatedObject={null}              currentState={trackingNumberState.buildTrackingNum}              setState={setTrackingNumber}            />        </div>        {/* <Input length={4} label={"הכנס מספר מעקב"} name={"email"} /> */}        <div className="captchaSection row d-flex        justify-content-center p-2 mr-2">          <Captcha ref={captchaRef} state={CaptchaState} setState={setCaptchaState}/>        </div>        <div className="row d-block m-4 p-2">          <Button            showFunction={setShowMessageSent}            isDisabled={CaptchaState.length < 2}            onClick={() => {              updateDB()            }}          />        </div>        {showMessageSent ? (          <Overlay            Component={              <div className="d-flex justify-content-center mt-2">                <img src={messageSentImage} />              </div>            }            currentState={showMessageSent}            hide={setShowMessageSent}          />        ) : null}      </div>    </div>  );};